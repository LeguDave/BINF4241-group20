Assignment 5

	Part 1
		Implement UTC's for all functionalities
		Document test cases in javadoc (not autogenerated)
		Documentation of found bugs and implemented fixes. If no bugs, explain

	Part 2            
        GameBoardTest failed tests:
            
            1. getOpenPositions: Fails because getOpenPositions() method in the GameBoard class starts iterating at the second column (int col = 1) instead of the first column (int col=0). 
            Changed starting column of iteration to int col = 0. 
            
            2. getOpenPositionsAll: same reason to fail and same fix as for "getOpenPositions" test.
            
            3. markOnBoard: Tests if the empty position [0][0] on the board can be marked for player 0. 
            The test fails because the mark() method says that the position can only be marked if it is not null, meaning if it is occupied.
            Otherwise it will not be marked. To fix this problem, we modified the if... else... clause in the mark() function (GameBoard class) by reversing the condition.
            The if... else... clause needs to be in a way that a player can only mark a position if it is unoccupied (==null) and not otherwise.
            
            4. markTwice: Checks if the position can be marked if it is already occupied. This is also fixed by modifying the mark() function as explained for the "markBoard" test.
             
            
            TicTacToeGameStateTest failed tests:
            
            1. startingPlayerIsX: this test failed because in the method getCurrentPlayer() the default was set to Player.0. 
            By fixing the getCurrentPlayer() as explained for the "switchPlayer" test, the test passes.
            
            2. switchPlayer: The test fails because the method getCurrentPlayer() is defined wrongly. 
            The method should simply return the currentPlayer variable instead of assigning it to another variable randomPlayer first. 
            The past passes after removing the lines where randomPlayer is created and currentPlayer is assigned to it.
            
            3. getAvailableStatesEmptyBoard: checks if a new empty gameboard has 9 unoccupied positions. 
            The test fails because the getOpenPositions() method (in GameBoard class) which is called by the availableStates() method (in TicTacToeGameState class) 
            starts iterating at the second column (int col = 1) instead of the first column (int col = 0). To fix this, the column count was set to 0 in the for loop. (int col = 0)
            
            4. getAvailableStatesLastOne: Like the "switchplayer" test, this test also fails in the line where getCurrentPlayer() is called. 
            By fixing the getCurrentPlayer() method as described before, this test passes.
            
            5. hasWinRow & hasWinCol: Check if there is either a row or a column that is marked by the same player. Fails because the hasWin() boolean returns false, if this condition was met.
            Changed to return true.
            
            7. isOverWin: failed because the winning condition for a complete row or column returned false. Was also fixed by the same change as for hasWinRow() and hasWinColumn().
            
            8. hasWinDiagonal: failed because completeDiagonal() method was not defined correctly. Fixed by changing (board.getMark(0, 0) == center && center == board.getMark(1, 2)) in the 
            second return statement to (board.getMark(0, 0) == center && center == board.getMark(2, 2)).
            
            
            
	Part 3
		   Behavior of the UNO program:
            
            When the main class is run:
            1.The User will be asked for the amount X of players. If X is not element of [2,10], the game will later catch it in the run
               method and shut down the program.
            2.The programm shows the players hand, whose turn it is. It also displays the top card of the discardpile. When this
            	card is a specialeffectcard of instance skipcard, drawtwocard, changedirectioncard or a wilddrawfour. The game will
            	cast the effect of the showing card to the current player.
            3.Now the player can input 1 or 2. 1 for playing a card from his/her hand. 2 for drawing a card. -->player has to input again,
            	if the player tried to input 1, while he/she can not play a card.
            4.If in step 3, 1 could be inputted successfully, the player can now input the index of the previous shown card of the hand.
            5.The chosen card will be inputted in the ismatchincard from the deck to check if the card matches the top card of the 
            	discard pile. If yes, then the card will be played successfully.
            6. At the end of the turn, the game call the method in player to check UNO. Then the game looks at the top card of the discard
            	pile. If the colour is NULL, then the player can choose the colour, that the next player has to play. The card's colour
            	will be changed to that colour. Now it will be checked if the draw pile is empty by calling isempty method of the deck.
            	If the draw pile is empty the shuffle method of the deck class will be called in the game and by doing so, the discard
            	pile will be shuffled and then transferred to the draw pile. Also all wild card's colour will be reset to NULL.
            7. Steps 2 to 6 will be repeated until someone has zero cards, then the player with zero card wins and the program ends.
                        
            
            a) In step 1, any input can be given for the amount of players, but the game will later catch it and shut down the program if it is lower than 2 or higher than 10.
               In step 3, the player currently playing is asked to input 1(play a card) or 2(draw a card). If you input 1, while you have no matching card on your hand, then the player
               will be asked again to input 1 or 2. 
               In case of step 4, an index of one of your handcards will have to be inputted. The program catches invalid indexes and asks the player again to input an index.
            b) In step 1, the input will be used for the constructor of the game instance. The input should not be used anywhere else.
               In step 3, the input decides the move a player can make. 1 can only be inputted if a legal play is possible with the palyers hand. 2 can always be inputted.
               In step 4, the input should play the card with the corresponding index from the players hand to the discardpile, if it is a matching card. Otherwise the input
               should be repeated. An illegal index also causes the program to ask the player again for a new index.
            c) At the start of a turn, the game will print the players hand and the top card of the discard pile. It should never print an empty hand, in which case the program will finish
               before doing so.


General: Use this file to write about the choices we made and everything that should be considered for the evalueation
Deadline: Friday 13th of December 18:00